{"version":3,"sources":["redux/constants.tsx","reportWebVitals.ts","redux/reducers/earthquake.tsx","redux/reducers/earthquakes-list.tsx","redux/reducers/index.tsx","redux/store.tsx","components/date-input/date-input.component.tsx","views/detail/detail-view.tsx","services/eathquake/earthquake.service.tsx","redux/actions.tsx","components/map/map.component.tsx","views/map/map-view.tsx","App.tsx","routes.tsx","index.tsx"],"names":["ACTIONS","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","isLoading","detail","earthquakeReducer","state","action","type","EARTHQUAKE_LOADER_TOGGLE","Object","assign","data","SET_EARTHQUAKE","list","earthquakesListReducer","EARTHQUAKES_LIST_LOADER_TOGGLE","SET_EARTHQUAKES_LIST","combineReducers","earthquake","earthquakesList","createStore","rootReducer","MaterialUIPicker","props","utils","DateFnsUtils","id","label","format","value","disabled","minDate","maxDate","onChange","date","onDateChange","KeyboardButtonProps","DetailView","loading","earthquakeDetails","className","CircularProgress","title","location","Date","toString","magnitude","BASE_API_URL","filterEarthquakes","selectedDates","a","datesQueryParams","selectedDatesMapper","url","starttime","endtime","concat","fetch","method","headers","Accept","res","json","error","Error","Promise","resolve","console","reject","findEarthquake","dates","dateParser","getFullYear","getMonth","getDate","earthquakeLoaderToggle","setEarthquake","earthquakesListLoaderToggle","MapComponent","withScriptjs","withGoogleMap","points","useState","map","setMap","openInfoWindowMarkerId","setOpenInfoWindowMarkerId","queryPoint","setQueryPoint","gmDefaultConfig","setGmDefaultConfig","useEffect","lng","geometry","coordinates","lat","place","properties","coords","getLatLngPoint","elem","google","maps","LatLng","zoom","center","length","gmPoints","bounds","LatLngBounds","forEach","extend","fitBounds","getEarthquakeDetails","store","dispatch","markerEl","marker","position","onClick","onCloseClick","style","padding","fontSize","color","backgroundColor","border","ref","options","streetViewControl","mapTypeControl","fullscreenControl","onMarkerClustererClick","averageCenter","enableRetinaIcons","gridSize","connect","size","googleMapURL","process","loadingElement","height","containerElement","mapElement","mapEartquake","updated","mag","status","setSelectedDates","history","useHistory","checkQuryParams","queryparamsEarthquakeId","URLSearchParams","search","get","push","loadFilteredEarthquakes","features","filter","handleInputChange","field","Routes","path","component","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2023dfbe.chunk.js","sourcesContent":["export enum ACTIONS {\n  EARTHQUAKE_LOADER_TOGGLE = 'EARTHQUAKE_LOADER_TOGGLE',\n  SET_EARTHQUAKE = 'SET_EARTHQUAKE',\n  EARTHQUAKES_LIST_LOADER_TOGGLE = 'EARTHQUAKES_LIST_LOADER_TOGGLE',\n  SET_EARTHQUAKES_LIST = 'SET_EARTHQUAKES_LIST',\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { IEarthquakeState } from '../../interfaces/state.interface';\nimport { ACTIONS } from '../constants';\n\nconst initialState: IEarthquakeState = {\n  isLoading: false,\n  detail: null,\n};\n\nconst earthquakeReducer = (state = initialState, action: { type: ACTIONS; data: any }): IEarthquakeState => {\n  switch (action.type) {\n    case ACTIONS.EARTHQUAKE_LOADER_TOGGLE:\n      return Object.assign({}, state, { isLoading: action.data });\n    case ACTIONS.SET_EARTHQUAKE:\n      return Object.assign({}, state, { detail: action.data });\n    default:\n      return state;\n  }\n};\n\nexport default earthquakeReducer;\n","import { IEarthquakesListState } from '../../interfaces/state.interface';\nimport { ACTIONS } from '../constants';\n\nconst initialState: IEarthquakesListState = {\n  isLoading: false,\n  list: [],\n};\n\nconst earthquakesListReducer = (state = initialState, action: { type: ACTIONS; data: any }): IEarthquakesListState => {\n  switch (action.type) {\n    case ACTIONS.EARTHQUAKES_LIST_LOADER_TOGGLE:\n      return Object.assign({}, state, { isLoading: action.data });\n    case ACTIONS.SET_EARTHQUAKES_LIST:\n      return Object.assign({}, state, { list: action.data });\n    default:\n      return state;\n  }\n};\n\nexport default earthquakesListReducer;\n","import { combineReducers } from 'redux';\nimport earthquake from './earthquake';\nimport earthquakesList from './earthquakes-list';\n\nexport default combineReducers({ earthquake, earthquakesList });\n","import { createStore } from 'redux';\nimport rootReducer from './reducers';\n\nexport default createStore(rootReducer);\n","import 'date-fns';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers';\ninterface IDateInputProps {\n  id: string;\n  label: string;\n  value: Date | null;\n  disabled: boolean;\n  minDate?: Date | null;\n  maxDate: Date;\n  onDateChange(date: Date | null): void;\n}\n\nconst MaterialUIPicker = (props: IDateInputProps) => {\n  const handleDateChange = (date: Date | null) => {\n    props.onDateChange(date);\n  };\n\n  return (\n    <MuiPickersUtilsProvider utils={DateFnsUtils}>\n      <KeyboardDatePicker\n        id={props.id}\n        label={props.label}\n        format=\"MM/dd/yyyy\"\n        value={props.value}\n        disabled={props.disabled}\n        minDate={props.minDate}\n        maxDate={props.maxDate}\n        onChange={handleDateChange}\n        KeyboardButtonProps={{\n          'aria-label': 'change date',\n        }}\n      />\n    </MuiPickersUtilsProvider>\n  );\n};\n\nexport default MaterialUIPicker;\n","import './detail-view.scss';\nimport { IEarthquakeMapTo } from '../../interfaces/earthquake.interface';\nimport Moment from 'react-moment';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst DetailView = ({\n  loading,\n  earthquakeDetails,\n}: {\n  loading: boolean;\n  earthquakeDetails: IEarthquakeMapTo | null;\n}) => (\n  <div className=\"detail-view\">\n    {loading ? (\n      <div className=\"spinner-container\">\n        <CircularProgress></CircularProgress>\n        <span className=\"ml-2\">Loading details...</span>\n      </div>\n    ) : (\n      <>\n        {earthquakeDetails ? (\n          <>\n            <div className=\"detail-view__row header\">\n              <h2 className=\"title\">{earthquakeDetails.id}</h2>\n              <h3 className=\"subtitle\">{earthquakeDetails.title}</h3>\n            </div>\n            <div className=\"detail-view__row details\">\n              <div className=\"detail-view__row-col\">\n                <span>\n                  <b>Location</b>: {earthquakeDetails.location}\n                </span>\n              </div>\n              <div className=\"detail-view__row-col\">\n                <span>\n                  <b>Date</b>: <Moment format=\"YYYY/MM/DD\">{new Date(earthquakeDetails.date).toString()}</Moment>\n                </span>\n              </div>\n              <div className=\"detail-view__row-col\">\n                <span>\n                  <b>Type</b>: {earthquakeDetails.type}\n                </span>\n              </div>\n              <div className=\"detail-view__row-col\">\n                <span>\n                  <b>Magnitude</b>: {earthquakeDetails.magnitude}\n                </span>\n              </div>\n              <div className=\"detail-view__row-col\">\n                <span>\n                  <b>State</b>: {earthquakeDetails.state}\n                </span>\n              </div>\n            </div>\n          </>\n        ) : (\n          <span>No data</span>\n        )}\n      </>\n    )}\n  </div>\n);\n\nexport default DetailView;\n","import { ISelectedDates, ISelectedDatesMapTo } from '../../interfaces/selected-dates.interface';\n\nconst BASE_API_URL = 'https://earthquake.usgs.gov/fdsnws/event/1/query?format=geojson';\n\nexport const filterEarthquakes = async (selectedDates: ISelectedDates): Promise<any> => {\n  const datesQueryParams = selectedDatesMapper(selectedDates);\n  let url = `${BASE_API_URL}&starttime=${datesQueryParams.starttime}`;\n\n  if (datesQueryParams.endtime) {\n    url = url.concat(`&endtime=${datesQueryParams.endtime}`);\n  }\n\n  try {\n    const res = await fetch(url, {\n      method: 'GET',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n    });\n\n    const data = await res.json();\n\n    if (data.error) {\n      throw new Error(data.error);\n    }\n\n    return Promise.resolve(data);\n  } catch (err) {\n    console.error(err);\n    return Promise.reject(err);\n  }\n};\n\nexport const findEarthquake = async (id: string): Promise<any> => {\n  try {\n    const res = await fetch(`${BASE_API_URL}&eventid=${id}`, {\n      method: 'GET',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n    });\n\n    const data = await res.json();\n\n    if (data.error) {\n      throw new Error(data.error);\n    }\n\n    return Promise.resolve(data);\n  } catch (err) {\n    console.error(err);\n    return Promise.reject(err);\n  }\n};\n\nconst selectedDatesMapper = (dates: ISelectedDates): ISelectedDatesMapTo => {\n  return {\n    starttime: dates.starttime ? dateParser(dates.starttime) : null,\n    endtime: dates.endtime ? dateParser(dates.endtime) : null,\n  };\n};\n\nconst dateParser = (date: Date): string => `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()}`;\n","import { IEarthquake } from '../interfaces/earthquake.interface';\nimport { IMapPoint } from '../interfaces/map-point.interface';\nimport { ACTIONS } from './constants';\n\nexport const earthquakeLoaderToggle = (data: boolean) => {\n  return { type: ACTIONS.EARTHQUAKE_LOADER_TOGGLE, data };\n};\n\nexport const setEarthquake = (data: IEarthquake | null) => {\n  return { type: ACTIONS.SET_EARTHQUAKE, data };\n};\n\nexport const earthquakesListLoaderToggle = (data: boolean) => {\n  return { type: ACTIONS.EARTHQUAKES_LIST_LOADER_TOGGLE, data };\n};\n\nexport const setEarthquakesList = (data: IMapPoint[]) => {\n  return { type: ACTIONS.SET_EARTHQUAKES_LIST, data };\n};\n","import { useState, useEffect } from 'react';\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker } from 'react-google-maps';\nimport MarkerClusterer from 'react-google-maps/lib/components/addons/MarkerClusterer';\nimport InfoWindow from 'react-google-maps/lib/components/InfoWindow';\nimport { IMapPoint } from '../../interfaces/map-point.interface';\nimport { findEarthquake } from '../../services/eathquake/earthquake.service';\nimport store from '../../redux/store';\nimport { earthquakeLoaderToggle, setEarthquake } from '../../redux/actions';\nimport { IEarthquake } from '../../interfaces/earthquake.interface';\n\ninterface IGmConfig {\n  zoom: number;\n  center: google.maps.LatLng;\n}\n\nconst MapComponent = withScriptjs(\n  withGoogleMap((props: any) => {\n    const earthquake: IEarthquake | null = props.earthquake;\n    const points: IMapPoint[] = props.points;\n\n    const [map, setMap] = useState<GoogleMap>();\n    const [openInfoWindowMarkerId, setOpenInfoWindowMarkerId] = useState<string | null>(null);\n    const [queryPoint, setQueryPoint] = useState<IMapPoint>();\n    const [gmDefaultConfig, setGmDefaultConfig] = useState<IGmConfig>();\n\n    useEffect(() => {\n      if (earthquake) {\n        const lng = earthquake.geometry.coordinates[0];\n        const lat = earthquake.geometry.coordinates[1];\n        setQueryPoint({\n          id: earthquake.id,\n          place: earthquake.properties.place,\n          coords: { lat, lng },\n        });\n      }\n    }, []);\n\n    const startMap = (): void => {\n      if (map) {\n        if (queryPoint) {\n          setGmDefaultConfig({\n            zoom: 8,\n            center: new google.maps.LatLng(queryPoint.coords.lat, queryPoint.coords.lng),\n          });\n        } else if (points && points.length > 0) {\n          const gmPoints = points.map((elem) => getLatLngPoint(elem));\n          const bounds = new google.maps.LatLngBounds();\n          gmPoints.forEach((elem) => {\n            bounds.extend(elem);\n          });\n          map.fitBounds(bounds);\n        } else {\n          setGmDefaultConfig({\n            zoom: 2,\n            center: new google.maps.LatLng(0, 0),\n          });\n        }\n      }\n    };\n\n    const getLatLngPoint = (elem: IMapPoint): google.maps.LatLng => {\n      return new google.maps.LatLng(elem.coords.lat, elem.coords.lng);\n    };\n\n    useEffect(startMap, [map, points]);\n\n    const openToggle = (id: string) => {\n      setOpenInfoWindowMarkerId(openInfoWindowMarkerId && openInfoWindowMarkerId === id ? null : id);\n    };\n\n    const getEarthquakeDetails = async (id: string) => {\n      store.dispatch(earthquakeLoaderToggle(true));\n      const res = await findEarthquake(id);\n      store.dispatch(setEarthquake(res));\n      store.dispatch(earthquakeLoaderToggle(false));\n    };\n\n    const onInfowindowClose = () => {\n      setOpenInfoWindowMarkerId(null);\n      store.dispatch(setEarthquake(null));\n    };\n\n    const markerEl = (marker: IMapPoint) => (\n      <Marker\n        key={marker.id}\n        position={{ lat: marker.coords.lat, lng: marker.coords.lng }}\n        onClick={() => openToggle(marker.id)}\n      >\n        {openInfoWindowMarkerId === marker.id && (\n          <InfoWindow onCloseClick={() => onInfowindowClose()}>\n            <div style={{ padding: `8px` }}>\n              <h4 style={{ fontSize: '20px' }}>{marker.id}</h4>\n              <p style={{ fontSize: '16px' }}>{marker.place}</p>\n              <button\n                style={{\n                  color: '#fff',\n                  backgroundColor: '#3a86ff',\n                  fontSize: '16px',\n                  padding: '4px 12px',\n                  border: 'none',\n                }}\n                onClick={() => getEarthquakeDetails(marker.id)}\n              >\n                Show details\n              </button>\n            </div>\n          </InfoWindow>\n        )}\n      </Marker>\n    );\n\n    return (\n      <div className=\"map-container\">\n        <GoogleMap\n          zoom={gmDefaultConfig?.zoom}\n          center={gmDefaultConfig?.center}\n          ref={(ref) => {\n            setMap(ref as GoogleMap);\n          }}\n          options={{ streetViewControl: false, mapTypeControl: false, fullscreenControl: false }}\n        >\n          {queryPoint || (points && points.length > 0) ? (\n            queryPoint ? (\n              markerEl(queryPoint)\n            ) : (\n              <MarkerClusterer onClick={props.onMarkerClustererClick} averageCenter enableRetinaIcons gridSize={60}>\n                {points.map((marker: IMapPoint) => markerEl(marker))}\n              </MarkerClusterer>\n            )\n          ) : (\n            <></>\n          )}\n        </GoogleMap>\n      </div>\n    );\n  })\n);\n\nexport default MapComponent;\n","import './map-view.scss';\nimport MapComponent from '../../components/map/map.component';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { connect } from 'react-redux';\nimport { IState } from '../../interfaces/state.interface';\n\nconst MapView = ({ earthquake, earthquakesList }: IState) => {\n  return (\n    <div className=\"map-view\">\n      {earthquakesList.isLoading || (earthquake.isLoading && earthquakesList.list.length === 0) ? (\n        <div className=\"spinner-wrapper\">\n          <CircularProgress size={120} />\n        </div>\n      ) : (\n        <MapComponent\n          googleMapURL={`https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_GOOGLE_MAPS_API_KEY}&libraries=places&language=es`}\n          loadingElement={<div style={{ height: `100%` }} />}\n          containerElement={<div style={{ height: `100%` }} />}\n          mapElement={<div style={{ height: `100%` }} />}\n          earthquake={earthquake.detail}\n          points={earthquakesList.list}\n        />\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: IState): IState => {\n  return state;\n};\n\nexport default connect(mapStateToProps)(MapView);\n","import './App.scss';\nimport MaterialUIPicker from './components/date-input/date-input.component';\nimport DetailView from './views/detail/detail-view';\nimport MapView from './views/map/map-view';\nimport { useState, useEffect } from 'react';\nimport { filterEarthquakes, findEarthquake } from './services/eathquake/earthquake.service';\nimport { ISelectedDates } from './interfaces/selected-dates.interface';\nimport { connect } from 'react-redux';\nimport { IEarthquake, IEarthquakeMapTo } from './interfaces/earthquake.interface';\nimport { IState, IEarthquakeState } from './interfaces/state.interface';\nimport store from './redux/store';\nimport {\n  earthquakeLoaderToggle,\n  setEarthquake,\n  earthquakesListLoaderToggle,\n  setEarthquakesList,\n} from './redux/actions';\nimport { useHistory } from 'react-router-dom';\n\nconst APP_TITLE = 'Earthquakes Map Visualizer';\n\nconst App = ({ isLoading, detail }: IEarthquakeState) => {\n  const [selectedDates, setSelectedDates] = useState<ISelectedDates>({ starttime: null, endtime: null });\n\n  const history = useHistory();\n\n  const checkQuryParams = async () => {\n    if (queryparamsEarthquakeId()) {\n      store.dispatch(earthquakeLoaderToggle(true));\n      const earthquake = await findEarthquake(queryparamsEarthquakeId() as string);\n      store.dispatch(setEarthquake(earthquake));\n      store.dispatch(earthquakeLoaderToggle(false));\n    }\n  };\n\n  const queryparamsEarthquakeId = (): string | null => new URLSearchParams(history.location.search).get('id');\n\n  useEffect(() => {\n    checkQuryParams();\n  }, []);\n\n  useEffect(() => {\n    if (detail) {\n      history.push(`?id=${detail.id}`);\n    }\n  }, [detail]);\n\n  const loadFilteredEarthquakes = async () => {\n    store.dispatch(earthquakesListLoaderToggle(true));\n    const res = await filterEarthquakes(selectedDates);\n    store.dispatch(\n      setEarthquakesList(\n        res.features\n          .filter((elem: any) => elem.geometry.type === 'Point')\n          .map((elem: any) => ({\n            id: elem.id,\n            place: elem.properties.place,\n            coords: {\n              lng: elem.geometry.coordinates[0],\n              lat: elem.geometry.coordinates[1],\n            },\n          }))\n      )\n    );\n    store.dispatch(earthquakesListLoaderToggle(false));\n  };\n\n  useEffect(() => {\n    if (selectedDates.starttime) {\n      loadFilteredEarthquakes();\n    }\n  }, [selectedDates]);\n\n  const handleInputChange = (field: 'starttime' | 'endtime', date: Date | null) => {\n    if (date) {\n      store.dispatch(setEarthquake(null));\n      setSelectedDates({ ...selectedDates, [field]: date.toString() !== 'Invalid Date' ? date : null });\n    }\n  };\n\n  return (\n    <div className=\"app\">\n      <header className=\"app__header\">\n        <div className=\"app__header-navbar\">\n          <h2 className=\"app-title\">{APP_TITLE}</h2>\n          <div className=\"date-inputs\">\n            <div className=\"date-inputs__elem\">\n              <MaterialUIPicker\n                id=\"from-date\"\n                label=\"From date\"\n                value={selectedDates.starttime}\n                disabled={false}\n                maxDate={new Date()}\n                onDateChange={(date: Date | null) => handleInputChange('starttime', date)}\n              />\n            </div>\n            <div className=\"date-inputs__elem\">\n              <MaterialUIPicker\n                id=\"to-date\"\n                label=\"To date\"\n                value={selectedDates.endtime}\n                disabled={!!!selectedDates.starttime}\n                minDate={selectedDates.starttime}\n                maxDate={new Date()}\n                onDateChange={(date: Date | null) => handleInputChange('endtime', date)}\n              />\n            </div>\n          </div>\n        </div>\n      </header>\n      <section className=\"app__views\">\n        <div className=\"app__views-elem map\">\n          <MapView />\n        </div>\n        <div className=\"app__views-elem detail\">\n          {isLoading || detail ? (\n            <DetailView loading={isLoading} earthquakeDetails={detail ? mapEartquake(detail) : null} />\n          ) : (\n            <></>\n          )}\n        </div>\n      </section>\n    </div>\n  );\n};\n\nconst mapEartquake = (earthquake: IEarthquake): IEarthquakeMapTo => ({\n  id: earthquake.id,\n  location: earthquake.properties.place,\n  title: earthquake.properties.title,\n  date: earthquake.properties.updated,\n  type: earthquake.properties.type,\n  magnitude: earthquake.properties.mag,\n  state: earthquake.properties.status,\n});\n\nconst mapStateToProps = (state: IState): IEarthquakeState => {\n  return state.earthquake;\n};\n\nexport default connect(mapStateToProps)(App);\n","import { BrowserRouter as Router, Route } from 'react-router-dom';\nimport App from './App';\n\nconst Routes = () => (\n  <Router>\n    <Route path=\"/\" component={App} />\n  </Router>\n);\n\nexport default Routes;\n","import ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport reportWebVitals from './reportWebVitals';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport store from './redux/store';\nimport Routes from './routes';\n\nReactDOM.render(\n  <Provider store={store}>\n    <Routes />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}