{"version":3,"sources":["redux/constants.tsx","components/date-input/date-input.component.tsx","views/detail/detail-view.tsx","services/eathquake/earthquake.service.tsx","redux/reducers/earthquake.tsx","redux/reducers/index.tsx","redux/store.tsx","redux/actions.tsx","components/map/map.component.tsx","views/map/map-view.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ACTIONS","MaterialUIPicker","props","utils","DateFnsUtils","id","label","format","value","onChange","date","onDateChange","KeyboardButtonProps","DetailView","loading","earthquakeDetails","className","CircularProgress","title","location","Date","toString","type","magnitude","state","BASE_API_URL","filterEarthquakes","selectedDates","a","datesQueryParams","selectedDatesMapper","url","starttime","endtime","concat","fetch","method","headers","Accept","res","json","data","error","Error","Promise","resolve","console","reject","findEarthquake","dates","dateParser","getFullYear","getMonth","getDate","initialState","isLoading","detail","earthquakeReduce","action","LOADER_TOGGLE","Object","assign","SET_EARTHQUAKE","combineReducers","earthquake","createStore","rootReducer","loaderToggle","setEarthquake","MapComponent","withScriptjs","withGoogleMap","points","useState","map","setMap","getLatLngPoint","elem","google","maps","LatLng","coords","lat","lng","useEffect","gmPoints","bounds","LatLngBounds","forEach","extend","fitBounds","openInfoWindowMarkerId","setOpenInfoWindowMarkerId","getEarthquakeDetails","store","dispatch","ref","options","streetViewControl","mapTypeControl","fullscreenControl","onClick","onMarkerClustererClick","averageCenter","enableRetinaIcons","gridSize","marker","position","onCloseClick","style","padding","fontSize","place","color","backgroundColor","border","MapView","googleMapURL","process","loadingElement","height","containerElement","mapElement","size","mapEartquake","properties","updated","mag","status","connect","setSelectedDates","earthquakes","setEarthquakes","loadFilteredEarthquakes","features","filter","geometry","coordinates","handleInputChange","field","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0448ebaf.chunk.js","sourcesContent":["export enum ACTIONS {\n  LOADER_TOGGLE = 'LOADER_TOGGLE',\n  SET_EARTHQUAKE = 'SET_EARTHQUAKE',\n}\n","import 'date-fns';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers';\n\ninterface IDateInputProps {\n  id: string;\n  label: string;\n  value: Date | null;\n  onDateChange(date: Date): void;\n}\n\nconst MaterialUIPicker = (props: IDateInputProps) => {\n  const handleDateChange = (date: Date | null) => {\n    if (date) {\n      props.onDateChange(date);\n    }\n  };\n\n  return (\n    <MuiPickersUtilsProvider utils={DateFnsUtils}>\n      <KeyboardDatePicker\n        id={props.id}\n        label={props.label}\n        format=\"MM/dd/yyyy\"\n        value={props.value}\n        onChange={handleDateChange}\n        KeyboardButtonProps={{\n          'aria-label': 'change date',\n        }}\n      />\n    </MuiPickersUtilsProvider>\n  );\n};\n\nexport default MaterialUIPicker;\n","import './detail-view.scss';\nimport { IEarthquakeMapTo } from '../../interfaces/earthquake.interface';\nimport Moment from 'react-moment';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst DetailView = ({\n  loading,\n  earthquakeDetails,\n}: {\n  loading: boolean;\n  earthquakeDetails: IEarthquakeMapTo | null;\n}) => (\n  <div className=\"detail-view\">\n    {loading ? (\n      <div className=\"spinner-container\">\n        <CircularProgress></CircularProgress>\n        <span className=\"ml-2\">Loading details...</span>\n      </div>\n    ) : (\n      <>\n        {earthquakeDetails ? (\n          <>\n            <div className=\"detail-view__row header\">\n              <h2 className=\"title\">{earthquakeDetails.id}</h2>\n              <h3 className=\"subtitle\">{earthquakeDetails.title}</h3>\n            </div>\n            <div className=\"detail-view__row details\">\n              <div className=\"detail-view__row-col\">\n                <span>\n                  <b>Location</b>: {earthquakeDetails.location}\n                </span>\n              </div>\n              <div className=\"detail-view__row-col\">\n                <span>\n                  <b>Date</b>: <Moment format=\"YYYY/MM/DD\">{new Date(earthquakeDetails.date).toString()}</Moment>\n                </span>\n              </div>\n              <div className=\"detail-view__row-col\">\n                <span>\n                  <b>Type</b>: {earthquakeDetails.type}\n                </span>\n              </div>\n              <div className=\"detail-view__row-col\">\n                <span>\n                  <b>Magnitude</b>: {earthquakeDetails.magnitude}\n                </span>\n              </div>\n              <div className=\"detail-view__row-col\">\n                <span>\n                  <b>State</b>: {earthquakeDetails.state}\n                </span>\n              </div>\n            </div>\n          </>\n        ) : (\n          <span>No data</span>\n        )}\n      </>\n    )}\n  </div>\n);\n\nexport default DetailView;\n","import { ISelectedDates, ISelectedDatesMapTo } from '../../interfaces/selected-dates.interface';\n\nconst BASE_API_URL = 'https://earthquake.usgs.gov/fdsnws/event/1/query?format=geojson';\n\nexport const filterEarthquakes = async (selectedDates: ISelectedDates): Promise<any> => {\n  const datesQueryParams = selectedDatesMapper(selectedDates);\n  let url = `${BASE_API_URL}&starttime=${datesQueryParams.starttime}`;\n\n  if (datesQueryParams.endtime) {\n    url = url.concat(`&endtime=${datesQueryParams.endtime}`);\n  }\n\n  try {\n    const res = await fetch(url, {\n      method: 'GET',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n    });\n\n    const data = await res.json();\n\n    if (data.error) {\n      throw new Error(data.error);\n    }\n\n    return Promise.resolve(data);\n  } catch (err) {\n    console.error(err);\n    return Promise.reject(err);\n  }\n};\n\nexport const findEarthquake = async (id: string): Promise<any> => {\n  try {\n    const res = await fetch(`${BASE_API_URL}&eventid=${id}`, {\n      method: 'GET',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n    });\n\n    const data = await res.json();\n\n    if (data.error) {\n      throw new Error(data.error);\n    }\n\n    return Promise.resolve(data);\n  } catch (err) {\n    console.error(err);\n    return Promise.reject(err);\n  }\n};\n\nconst selectedDatesMapper = (dates: ISelectedDates): ISelectedDatesMapTo => {\n  return { starttime: dateParser(dates.starttime), endtime: dates.endtime ? dateParser(dates.endtime) : null };\n};\n\nconst dateParser = (date: Date): string => `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()}`;\n","import { IEarthquakeState } from '../../interfaces/state.interface';\nimport { ACTIONS } from '../constants';\n\nconst initialState: IEarthquakeState = {\n  isLoading: false,\n  detail: null,\n};\n\nconst earthquakeReduce = (state = initialState, action: { type: ACTIONS; data: any }): IEarthquakeState => {\n  switch (action.type) {\n    case ACTIONS.LOADER_TOGGLE:\n      return Object.assign({}, state, { isLoading: action.data });\n    case ACTIONS.SET_EARTHQUAKE:\n      return Object.assign({}, state, { detail: action.data });\n    default:\n      return state;\n  }\n};\n\nexport default earthquakeReduce;\n","import { combineReducers } from 'redux';\nimport earthquake from './earthquake';\n\nexport default combineReducers({ earthquake });\n","import { createStore } from 'redux';\nimport rootReducer from './reducers';\n\nexport default createStore(rootReducer);\n","import { IEarthquake } from '../interfaces/earthquake.interface';\nimport { ACTIONS } from './constants';\n\nexport const loaderToggle = (data: boolean) => {\n  return { type: ACTIONS.LOADER_TOGGLE, data };\n};\n\nexport const setEarthquake = (data: IEarthquake | null) => {\n  return { type: ACTIONS.SET_EARTHQUAKE, data };\n};\n","import { useState, useEffect } from 'react';\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker } from 'react-google-maps';\nimport MarkerClusterer from 'react-google-maps/lib/components/addons/MarkerClusterer';\nimport InfoWindow from 'react-google-maps/lib/components/InfoWindow';\nimport { IMapPoint } from '../../interfaces/map-point.interface';\nimport { findEarthquake } from '../../services/eathquake/earthquake.service';\nimport store from '../../redux/store';\nimport { loaderToggle, setEarthquake } from '../../redux/actions';\n\nconst MapComponent = withScriptjs(\n  withGoogleMap((props: any) => {\n    const points: IMapPoint[] = props.points;\n\n    const [map, setMap] = useState<GoogleMap | null>(null);\n\n    const startMap = (): void => {\n      if (map) {\n        const gmPoints = points.map((elem) => getLatLngPoint(elem));\n        const bounds = new google.maps.LatLngBounds();\n        gmPoints.forEach((elem) => {\n          bounds.extend(elem);\n        });\n        map.fitBounds(bounds);\n      }\n    };\n\n    const getLatLngPoint = (elem: IMapPoint): google.maps.LatLng => {\n      return new google.maps.LatLng(elem.coords.lat, elem.coords.lng);\n    };\n\n    useEffect(startMap, [map, points]);\n\n    const [openInfoWindowMarkerId, setOpenInfoWindowMarkerId] = useState<string | null>(null);\n\n    const openToggle = (id: string) => {\n      setOpenInfoWindowMarkerId(openInfoWindowMarkerId && openInfoWindowMarkerId === id ? null : id);\n    };\n\n    const getEarthquakeDetails = async (id: string) => {\n      store.dispatch(loaderToggle(true));\n      const earthquake = await findEarthquake(id);\n      store.dispatch(setEarthquake(earthquake));\n      store.dispatch(loaderToggle(false));\n    };\n\n    const onInfowindowClose = () => {\n      setOpenInfoWindowMarkerId(null);\n      store.dispatch(setEarthquake(null));\n    };\n\n    const gmMap = () => {\n      return (\n        <GoogleMap\n          ref={(ref) => {\n            setMap(ref as GoogleMap);\n          }}\n          options={{ streetViewControl: false, mapTypeControl: false, fullscreenControl: false }}\n        >\n          <MarkerClusterer onClick={props.onMarkerClustererClick} averageCenter enableRetinaIcons gridSize={60}>\n            {points.map((marker: IMapPoint) => (\n              <Marker\n                key={marker.id}\n                position={{ lat: marker.coords.lat, lng: marker.coords.lng }}\n                onClick={() => openToggle(marker.id)}\n              >\n                {openInfoWindowMarkerId === marker.id && (\n                  <InfoWindow onCloseClick={() => onInfowindowClose()}>\n                    <div style={{ padding: `8px` }}>\n                      <h4 style={{ fontSize: '20px' }}>{marker.id}</h4>\n                      <p style={{ fontSize: '16px' }}>{marker.place}</p>\n                      <button\n                        style={{\n                          color: '#fff',\n                          backgroundColor: '#3a86ff',\n                          fontSize: '16px',\n                          padding: '4px 12px',\n                          border: 'none',\n                        }}\n                        onClick={() => getEarthquakeDetails(marker.id)}\n                      >\n                        Show details\n                      </button>\n                    </div>\n                  </InfoWindow>\n                )}\n              </Marker>\n            ))}\n          </MarkerClusterer>\n        </GoogleMap>\n      );\n    };\n\n    return <div className=\"map-container\">{gmMap()}</div>;\n  })\n);\n\nexport default MapComponent;\n","import './map-view.scss';\nimport MapComponent from '../../components/map/map.component';\nimport { IMapPoint } from '../../interfaces/map-point.interface';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst MapView = (props: { points: IMapPoint[] | null }) => {\n  return (\n    <div className=\"map-view\">\n      {props.points ? (\n        <MapComponent\n          googleMapURL={`https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_GOOGLE_MAPS_API_KEY}&libraries=places&language=es`}\n          loadingElement={<div style={{ height: `100%` }} />}\n          containerElement={<div style={{ height: `100%` }} />}\n          mapElement={<div style={{ height: `100%` }} />}\n          points={props.points as IMapPoint[]}\n        />\n      ) : (\n        <div className=\"spinner-wrapper\">\n          <CircularProgress size={120} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MapView;\n","import './App.scss';\nimport MaterialUIPicker from './components/date-input/date-input.component';\nimport DetailView from './views/detail/detail-view';\nimport MapView from './views/map/map-view';\nimport { useState, useEffect } from 'react';\nimport { filterEarthquakes } from './services/eathquake/earthquake.service';\nimport { ISelectedDates } from './interfaces/selected-dates.interface';\nimport { IMapPoint } from './interfaces/map-point.interface';\nimport { connect } from 'react-redux';\nimport { IEarthquake, IEarthquakeMapTo } from './interfaces/earthquake.interface';\nimport { IState, IEarthquakeState } from './interfaces/state.interface';\nimport store from './redux/store';\nimport { setEarthquake } from './redux/actions';\n\nconst APP_TITLE = 'Earthquakes Map Visualizer';\n\nconst App = ({ isLoading, detail }: IEarthquakeState) => {\n  const [selectedDates, setSelectedDates] = useState<ISelectedDates>({ starttime: new Date(), endtime: null });\n  const [earthquakes, setEarthquakes] = useState<IMapPoint[] | null>(null);\n\n  useEffect(() => {\n    loadFilteredEarthquakes();\n  }, [selectedDates]);\n\n  const loadFilteredEarthquakes = async () => {\n    setEarthquakes(null);\n    const res = await filterEarthquakes(selectedDates);\n    setEarthquakes(\n      res.features\n        .filter((elem: any) => elem.geometry.type === 'Point')\n        .map((elem: any) => ({\n          id: elem.id,\n          place: elem.properties.place,\n          coords: {\n            lng: elem.geometry.coordinates[0],\n            lat: elem.geometry.coordinates[1],\n          },\n        }))\n    );\n  };\n\n  const handleInputChange = (field: 'starttime' | 'endtime', date: Date) => {\n    store.dispatch(setEarthquake(null));\n    setSelectedDates({ ...selectedDates, [field]: date });\n  };\n\n  return (\n    <div className=\"app\">\n      <header className=\"app__header\">\n        <div className=\"app__header-navbar\">\n          <h2 className=\"app-title\">{APP_TITLE}</h2>\n          <div className=\"date-inputs\">\n            <div className=\"date-inputs__elem\">\n              <MaterialUIPicker\n                id=\"from-date\"\n                label=\"From date\"\n                value={selectedDates.starttime}\n                onDateChange={(date: Date) => handleInputChange('starttime', date)}\n              />\n            </div>\n            <div className=\"date-inputs__elem\">\n              <MaterialUIPicker\n                id=\"to-date\"\n                label=\"To date\"\n                value={selectedDates.endtime}\n                onDateChange={(date: Date) => handleInputChange('endtime', date)}\n              />\n            </div>\n          </div>\n        </div>\n      </header>\n      <section className=\"app__views\">\n        <div className=\"app__views-elem map\">\n          <MapView points={earthquakes} />\n        </div>\n        <div className=\"app__views-elem detail\">\n          {isLoading || detail ? (\n            <DetailView loading={isLoading} earthquakeDetails={detail ? mapEartquake(detail) : null} />\n          ) : (\n            <></>\n          )}\n        </div>\n      </section>\n    </div>\n  );\n};\n\nconst mapEartquake = (earthquake: IEarthquake): IEarthquakeMapTo => ({\n  id: earthquake.id,\n  location: earthquake.properties.place,\n  title: earthquake.properties.title,\n  date: earthquake.properties.updated,\n  type: earthquake.properties.type,\n  magnitude: earthquake.properties.mag,\n  state: earthquake.properties.status,\n});\n\nconst mapStateToProps = (state: IState): IEarthquakeState => {\n  return state.earthquake;\n};\n\nexport default connect(mapStateToProps)(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}